# https://docs.microsoft.com/azure/devops/pipelines/yaml-schema

pr: none
trigger:
  batch: true
  branches:
    include:
      - master
      - release/*

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: CustomVersion
  value: $(GitBuildVersionSimple).$(Build.BuildId)

pool:
  vmImage: 'windows-latest'

steps:
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: build
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: test
    projects: '*Tests/*.csproj'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: publish
    publishWebProjects: true
    arguments: '--configuration Release --self-contained --output published-app --runtime win-x64 --self-contained true'
    zipAfterPublish: false

- task: NuGetCommand@2
  displayName: 'Create Octopus package'
  inputs:
    command: pack
    packagesToPack: 'WhyNotEarth.Meredith.App/WhyNotEarth.Meredith.App.nuspec'
    packDestination: 'OctopusPackages'
    buildProperties: 'version=$(CustomVersion)'

- task: NuGetCommand@2
  displayName: 'Push NuGet package to Octopus feed'
  inputs:
    command: push
    packagesToPush: 'OctopusPackages/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'meredith-core/OctopusDeployFeed'

- task: OctopusCreateRelease@3
  displayName: 'Create Octopus Release'
  inputs:
    OctoConnectedServiceName: 'OctopusServer'
    ProjectName: 'Meredith'
    ReleaseNumber: '$(CustomVersion)'
    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
      Channel: 'production'
    ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
      Channel: 'Default'
    AdditionalArguments: "--packageversion=$(CustomVersion)"